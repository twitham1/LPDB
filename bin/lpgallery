#!/usr/bin/perl

=pod

=head1 NAME

lpgallery - remote-control (keyboard) driven local picture browser

=head1 SYNOPSIS

lpgallery [startup file]

UNDER CONSTRUCTION - Picasa features don't yet exist!!!

=head1 DESCRIPTION

B<lpgallery> presents local pictures (optionally managed by Picasa) in
a keyboard (or remote) controlled browser, similar to mythgallery of
mythtv.  The main window navigates a "virtual filesytem" thumbnail
tree of multiple paths to galleries of the images.  A second window
presents any one image at a time.

=head2 Thumbnail Grid

The main window is a grid of thumnail images.  Picture collections are
represented by a stack of three images: the oldest, center and
youngest picture in the path below that point in the tree.  Arrow keys
move around the grid while the B<Enter> key moves into a lower path or
presents a single picture.  The B<Escape> key moves back up to the
parent path.  Metadata about the selected path is displayed above and
below the grid.

The top level virtual directories are:

=over

=item [Folders]

literal filesystem layout of picture files.  Any directory containing
images is called a "gallery".  By default images remain grouped in
these physical gallery collections in all virtual paths that follow
unless the Sort -> Gallery Groups menu option is changed to Ungrouped.

=item [Tags]

tag strings found in EXIF picture metadata

=item [Timeline]

pictures grouped chronologically into years or months

=item [Albums]

pictures organized by Albums (Picasa only)

=item [People]

thumbnails of named face rectangles from the images (Picasa only)

=item [Stars]

pictures marked with stars as favorites (Picasa only)

=back

=head2 Image Viewer

A second window opens when hitting B<Enter> on an image from the grid.
This displays one picture at maximum size for the window.  Arrow keys
will now navigate both windows.  B<Enter> again will zoom to original
size.  Scroll with the arrow keys for images larger than the window.
Finally, B<Escape> returns back to the thumbnail browser.

The B<i> "info" key cycles through metadata overlay levels.  This adds
common picture and camera metadata in the corners and (for Picasa
only) draws named rectangles around recognized faces.

=head1 OPTIONS

The B<M> key brings up a Menu of options including sorting, filtering,
starting a slide show and so on.

=cut

# by twitham@sbcglobal.net in 2020 based on picasagallery of 2013

use strict;
use warnings;
use Prima;
use Prima::Application name => "LPGallery";
use Prima::Image::Magick qw/:all/;
use LPDB;
use Prima::LPDB::ThumbViewer;

my $usage = "usage: $0 [startup perl configuration files, see manual]";

# configuration file options that can be overridden in files:
our $conf = {
    dbfile => '.lpdb.db',
    thumbfile => '.lpdb-thumb.db',
    updatesqltrace => 0,       # see SQL of DB updates?
    guisqltrace => 0,	       # see SQL of GUI?
    thumbviewer => sub {},     # called at startup, gets viewer object
    imageviewer => sub {},     # called at startup, gets viewer object
};

# configuration files: last option setting wins
for ("$ENV{HOME}/.lpdb.pl", "./.lpdb.pl", @ARGV) {
    if (-f $_) {
#	s{^(\w+)}{./$1};
	warn "using config $_\n";
	my $tmp = require $_ or die "$usage\n$_: $!";
	map { $conf->{$_} = $tmp->{$_} } keys %$tmp;
    } else {
	warn "no config at $_, skipping\n";
    }
}

# don't accidentally recurse: create database only with confirmation
my $create = -f $conf->{dbfile} && -s _ ? 0 : 1;
if ($create) {
    #     -t STDIN or die "bailing out, $conf->{cache} not configured here!\n";
    #     print "$conf->{cache} doesn't exist here!
    # Shall I create it and recurse for pictures?  yes/no [no] : ";
    -t STDIN or die "bailing out, $conf->{dbfile} not found here!\n";
    print "$conf->{dbfile} doesn't exist here!
	Shall I create it and recurse for pictures?  yes/no [no] : ";
    my $ans = <STDIN>;
    $ans =~ /^\s*y/i
	or die "cd to root of pictures and re-run\n";
    print "\n\nPlease wait 10 seconds for DB creation, ",
	"then GUI should appear\n\n";
}

my $lpdb;			# LPDB object, a local picture database
my $child;
if ($child = fork) {		# GUI starts after child is updating DB
    warn "$0: $$ forked $child to update $conf->{dbfile}\n";
    $conf->{guisqltrace} and $conf->{sqltrace} = 1;
    sleep 10 if $create;
    $lpdb = new LPDB($conf);
} else {			# child updates DB, creating if needed
    $conf->{updatesqltrace} and $conf->{sqltrace} = 1;
    unlink $conf->{dbfile} if $create;
    $lpdb = new LPDB($conf);
    $lpdb->create if $create;
    $lpdb->update('.');
    warn "$0: $$ done updating $conf->{dbfile}\n";
    exit;
}
END {
    kill 'TERM', $child if $child;
}

# huge for couch viewing, why is this line needed?!!!?
$::application->font->size(20);

# without above, get_default_font is too small.  I use xrdb -load file
# of this content for large text viewing from the couch:

# Prima.Font: Helvetica-20
# Prima.Color: white
# Prima.Back: black
# Prima.HiliteBackColor: gray33

my $lv;				# ListViewer
my $iv;				# ImageViewer
my $w;
{			    # my application icon: stack of 3 "images"
    my $size = 160;
    my $ot = $size / 3;		# one third
    my $tt = $size * 2 / 3;	# two thirds
    my $i = Prima::Icon->new(
	width => $size,
	height => $size,
	type   => im::bpp24,
	);
    $i->begin_paint;
    $i->color(cl::Blue);
    $i->bar(0, $size, $tt, $ot);
    $i->color(cl::Red);
    $i->bar($ot/2, $tt+$ot/2, $tt+$ot/2, $ot/2);
    $i->color(cl::Green);
    $i->bar($ot, $tt, $size, 0);
    $i->end_paint;
    $::application->icon($i);
}

$w = Prima::MainWindow->create(
    name => 'LPG',
    text => 'Local Picture Gallery',
    packPropagate => 0,
    size => [1600, 900],
    );

sub myclose { $w->deselect; $::application->close } # segfaults!??!!!

# print sort map {"$_->{name}\n"} @{$::application-> fonts}; # see available fonts!!!

$lv = $w->insert(
    'Prima::LPDB::ThumbViewer',
    lpdb => $lpdb,		# LPDB connection required in advance
    name => 'TV',
    onClick => sub {
	print $_[0]-> focusedItem, " is clicked\n";
    },
    size => [320, 320],
    # growMode => gm::GrowAll,
    pack => { expand => 1, fill => 'both' },
    );

$lv->smaller(6);		# resize thumbs to fill the window
$lv->focusedItem(0);
$w->repaint;

#$::application->yield;
if ($conf->{thumbviewer}) {	# optional startup configuration
    &{$conf->{thumbviewer}}($lv);
}

run Prima;

exit 0;

=pod

=back

=head1 TODO

Add full exiftool metadata overlay or side panel

Add filtering

Add all Picasa features

=head1 SEE ALSO
L<LPDB>, L<picasagallery>, L<Prima>

=head1 AUTHOR

Timothy D Witham <twitham@sbcglobal.net>

=head1 COPYRIGHT AND LICENSE

Copyright 2013-2022 Timothy D Witham.

This program is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.

=cut

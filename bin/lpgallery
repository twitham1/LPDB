#!/usr/bin/perl

=pod

=head1 NAME

lpgallery - remote-control (keyboard) driven local picture browser

=head1 FEATURES

UNDER CONSTRUCTION - for getting Prima LPDB browser up and running,
similar to picasagallery or mythgallery, like for mythtv

=cut

# by twitham@sbcglobal.net in 2020 based on picasagallery of 2013

# TODO: navigation object needed, sortable by basename or average
# time, via a database view over all files and virtual dirs:

# basename, displayed for dirs
# count, displayed for dirs (changes by filtering)
# average time of all photos (could change by filtering?)
# caption, optionally displayed for files (Picasa description for dirs)
# parent node, / for root [dirs]

# now all navigation/sorting is available from DB queries: start with
# all nodes that have / parent, drill down from there.  GUI can
# concatenate the full path to node and know all siblings.

use strict;
use warnings;
use Prima qw(Application);
use Prima::Image::Magick qw/:all/;
use LPDB;
use LPDB::Thumbnail;
use LPDB::Prima::ListViewer;

my $lpdb = new LPDB({dbfile => 'tmp.db',
		     sqltrace => 1,
		    });
my $th = new LPDB::Thumbnail($lpdb);

my $l;				# ListViewer
my $w = Prima::MainWindow->create(
    text => 'Local Picture Gallery',
    packPropagate => 0,
    menuItems => [
	['~Options' => [
	     ['bigger', 'Zoom ~In', '=', ord '=' => sub { $l->bigger } ],
	     ['smaller', 'Zoom ~Out', '-', ord '-' => sub { $l->smaller } ],
	     ['crops', '~Crop', 'c', ord 'c' => sub {
		 $l->{crops} = $l->{crops} ? 0 : 1;
		 $l->reset;
	      } ],
	     ['rand', '~Random Items' => sub {
		 $l->items([map { rand 1000 } ( 0 .. rand 1000)]);
		 $l->focusedItem(0);
		 $l->reset;
	      } ],
	     ['quit', '~Quit', 'Ctrl+Q', '^q' => sub { $::application->close } ],
	 ]
	]],
    );
$w->font->name('bitstream charter'); # hack!!!! how to find best font?
#$w->font->height(20);
#$w->font->style(fs::Italic);

#print sort map {"$_->{name}\n"} @{$::application-> fonts}; # see available fonts!!!

# this needs refactored, too complicated!!!!

sub scale { # return maximum x, y, offsets of im, retaining aspect ratio
    my($self, $im, $x, $y) = @_;
    my($w, $h) = ($im->width, $im->height);
    my @out;
    my $src = $w / $h;		# aspect ratios
    my $dst = $x / $y;
    if ($self->{crops}) {
	if ($src > $dst) {	# image wider than cell
	    my $crop = ($w - $h * $dst) / 2;
	    push @out, $x, $y, 0, 0, $h * $dst, $h, $crop, 0;
	} else {		# image taller than cell
	    my $crop = ($h - $w / $dst) / 2;
	    push @out, $x, $y, 0, 0, $w, $w / $dst, 0, $crop;
	}
    }
    if ($src > $dst) {		# image wider than cell
    	my $Y = $x / $src;
    	push @out, $x, $Y, 0, int(($y - $Y) / 2), $w, $h, 0, 0;
    } else {			# image taller than cell
    	my $X = $y * $src;
	push @out, $X, $y, int(($x - $X) / 2), 0, $w, $h, 0, 0;
    }
    return @out;
}

$l = $w->insert(
    'LPDB::Prima::ListViewer',
    itemWidth => 270,		# 4:3, should match thumb size in DB
    itemHeight => 200,		# maybe get these from configuration
    onDrawItem => sub {
    	my ($self, $canvas, $idx, $x1, $y1, $x2, $y2, $sel, $foc, $pre, $col) = @_;

#	warn "updating $idx\n"; # more than necessary?
	
	my $thumb = $th->get(1 + $idx % 10);
	$thumb or return "warn: can't get thumb!\n";
	my $im = magick_to_prima($thumb);
    	my $bk = $sel ? $self-> hiliteBackColor : cl::Back;
    	$bk = $self-> prelight_color($bk) if $pre;
    	$canvas-> backColor( $bk );
    	$canvas-> clear( $x1, $y1, $x2, $y2);
	$canvas-> color( $sel ? $self-> hiliteColor : cl::Fore);
	my $o = $sel || $foc || $pre ? 0 : int(($x2 - $x1) / 30);
    	my($x, $y, $xoff, $yoff, $w, $h, $xf, $yf, @p)
	    = &scale($self, $im, $x2-$x1-2*$o, $y2-$y1-2*$o);
    	$canvas->put_image_indirect($im, $x1 + $o + $xoff,
				    $y2 - $y - $o - $yoff, $xf, $yf,
				    $x, $y, $w, $h, $self->rop)
    	    or warn "put_image failed: $@\n";
	if (!$o and $self->{crops}) { # show original aspect rectangle
	    $canvas->rectangle($x1 + $o + $p[2],
			       $y2 - $p[1] - $o - $p[3],
			       $x1 + $o + $p[2] + $p[0],
			       $y2 - $p[1] - $o - $p[3] + $p[1]);
	}
	$canvas->textOpaque($sel);
	my $w = $canvas->get_text_width($idx, 1);
    	$canvas->text_out($idx, $x2 - $o -$w - 3, $y2 - 20 - $o);
	my $str = substr("hello world this is a long string",
			 0, rand 33);
	# $w = $canvas->get_text_width($str, 1);
    	# $canvas->text_out($str, $x1+$o + 3, ($y1+$y2)/2)
    	# $canvas->text_out($str, ($x1+$x2)/2 - $w/2, $o ? ($y1+$y2)/2 : $y1)
	$canvas->text_out($str, $x1 + $o + 3, $y1 + $o + 3)
	    if ($x2 - $x1) > 150;
    	$canvas-> rect_focus( $x1, $y1, $x2, $y2 ) if $foc;
    },
    onKeyDown => sub {
#	warn "@_\n";
    	# if ($_[2] == ord 'm') {
    	#     $w->popup;
    	# }
    },
    onClick => sub {
	print $_[0]-> focusedItem, " is clicked\n";
    },
    pack => { expand => 1, fill => 'both' },
    );

warn " brief keys ", $l->briefKeys;

$l->items([ 0 .. rand 1000]);
$l->focusedItem(0);
$l->reset;

run Prima;

exit 0;

=pod

=back

=head1 TODO

Add documenation from picasagallery here!!!

=head1 SEE ALSO
L<LPDB>, L<picasagallery>, L<Prima>

=head1 AUTHOR

Timothy D Witham <twitham@sbcglobal.net>

=head1 COPYRIGHT AND LICENSE

Copyright 2013-2020 Timothy D Witham.

This program is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.

=cut

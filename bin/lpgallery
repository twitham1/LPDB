#!/usr/bin/perl

=pod

=head1 NAME

lpgallery - remote-control (keyboard) driven local picture browser

=head1 FEATURES

UNDER CONSTRUCTION - for getting Prima LPDB browser up and running,
similar to picasagallery or mythgallery, like for mythtv

=cut

# by twitham@sbcglobal.net in 2020 based on picasagallery of 2013

use strict;
use warnings;
use Prima;
use Prima::Application name => "LPGallery";
use Prima::Image::Magick qw/:all/;
use LPDB;
use Prima::LPDB::ThumbViewer;

my $dbfile    = '.lpdb.db';
my $thumbfile = '.lpdb-thumb.db';

if (grep /tmp/, @ARGV) {      # hack!!!! make DB location configurable
    $dbfile = '/tmp/.lpdb.db';
    $thumbfile = '/tmp/.lpdb-thumb.db';
}

# don't accidentally recurse: create database only with confirmation
my $create = -f $dbfile && -s _ ? 0 : 1;
if ($create) {
    #     -t STDIN or die "bailing out, $conf->{cache} not configured here!\n";
    #     print "$conf->{cache} doesn't exist here!
    # Shall I create it and recurse for pictures?  yes/no [no] : ";
    -t STDIN or die "bailing out, $dbfile not found here!\n";
    print "$dbfile doesn't exist here!
	Shall I create it and recurse for pictures?  yes/no [no] : ";
    my $ans = <>;
    $ans =~ /^\s*y/i
	or die "cd to root of pictures and re-run\n";
    print "\n\nPlease wait 10 seconds for DB creation, ",
	"then GUI should appear\n\n";
}

my $lpdb;			# LPDB object, a local picture database
my $child;
if ($child = fork) {		# GUI starts after child is updating DB
    warn "$0: $$ forked $child to update $dbfile\n";
    sleep 10 if $create;
    $lpdb = new LPDB({dbfile => $dbfile,
		      thumbfile => $thumbfile,
		      # sqltrace => 1,
		     });
} else {			# child updates DB, creating if needed
    unlink $dbfile if $create;
    $lpdb = new LPDB({dbfile => $dbfile,
    		      thumbfile => $thumbfile,
    		      #		     sqltrace => 1,
    		     });
    $lpdb->create if $create;
    $lpdb->update('.');
    warn "$0: $$ done updating $dbfile\n";
    exit;
}
END {
    kill 'TERM', $child if $child;
}

# huge for couch viewing, why is this line needed?!!!?
$::application->font->size(20);

# without above, get_default_font is too small.  I use xrdb -load file
# of this content for large text viewing from the couch:

# Prima.Font: Helvetica-20
# Prima.Color: white
# Prima.Back: black
# Prima.HiliteBackColor: gray33

my $lv;				# ListViewer
my $iv;				# ImageViewer
my $w;
$w = Prima::MainWindow->create(
    name => 'LPG',
    text => 'Local Picture Gallery',
    packPropagate => 0,
    #size => [1920, 1080],
    size => [1600, 900],
    );

sub myclose { $w->deselect; $::application->close } # segfaults!??!!!

# my($x, $y) = (sv::XIcon, sv::YIcon); # see Window.pod on icon setting
# die "$x x $y"; 

# print sort map {"$_->{name}\n"} @{$::application-> fonts}; # see available fonts!!!

$lv = $w->insert(
    'Prima::LPDB::ThumbViewer',
    lpdb => $lpdb,		# LPDB connection required in advance
    name => 'TV',
    onClick => sub {
	print $_[0]-> focusedItem, " is clicked\n";
    },
    size => [320, 320],
    # growMode => gm::GrowAll,
    pack => { expand => 1, fill => 'both' },
    );

$lv->smaller(6);		# resize thumbs to fill the window
$lv->focusedItem(0);

run Prima;

exit 0;

=pod

=back

=head1 TODO

Add documenation from picasagallery here!!!

=head1 SEE ALSO
L<LPDB>, L<picasagallery>, L<Prima>

=head1 AUTHOR

Timothy D Witham <twitham@sbcglobal.net>

=head1 COPYRIGHT AND LICENSE

Copyright 2013-2022 Timothy D Witham.

This program is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.

=cut

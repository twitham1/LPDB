#!/usr/bin/perl

# by twitham@sbcglobal.net in 2020 based on picasagallery of 2013

use strict;
use warnings;
use FindBin qw($Bin);
use lib "$Bin/../lib";
use Prima 1.67;			# need native fullscreen
use Prima::Application name => 'LPGallery',
    skin => 'classic'; # scroll bars hard to see in 1.69 default skin flat
use Prima::Widget::StartupWindow;
use Prima::LPDB::ThumbViewer;
use LPDB;

my $usage = "usage: $0 [startup perl configuration files, see manual]";

# configuration file options that can be overridden in files:
our $conf = {
    dbfile => '.lpdb.db',
    thumbfile => '.lpdb-thumb.db',
    updatesqltrace => 0,       # see SQL of DB updates?
    guisqltrace => 0,	       # see SQL of GUI?
    thumbviewer => sub {},     # called at startup, gets viewer object
    imageviewer => sub {},     # called at startup, gets viewer object
    minpixels => 320 * 320 + 1,	# reject icons/thumbnails smaller than this
};

my @ext;			# all image formats we could support:
map { push @ext, @{$_->{fileExtensions}} } @{Prima::Image->codecs};
# But how to define video set???  These are types I have so far:
my @vid = qw/mp4 mov avi mpg asf wmv dv/;
warn "autosupport: @ext
videos: @vid\n";
push @ext, @vid;
$conf->{ext} = \@ext;
#exit;

# configuration files: last option setting wins
for ("$ENV{HOME}/.lpdb.pl", "./.lpdb.pl", @ARGV) {
    if (-f $_) {
#	s{^(\w+)}{./$1};
	warn "using config $_\n";
	my $tmp = require $_ or die "$usage\n$_: $!";
	map { $conf->{$_} = $tmp->{$_} } keys %$tmp;
    } else {
	warn "no config at $_, skipping\n";
    }
}

# don't accidentally recurse: create database only with confirmation
my $create = -f $conf->{dbfile} && -s _ ? 0 : 1;
if ($create) {
    -t STDIN or die "bailing out, $conf->{dbfile} not found here!\n";
    print "$conf->{dbfile} doesn't exist here!
	Shall I create it and recurse for pictures?  yes/no [no] : ";
    my $ans = <STDIN>;
    $ans =~ /^\s*y/i
	or die "cd to root of pictures and re-run\n";
    print "\n\nPlease wait 10 seconds for DB creation, ",
	"then GUI should appear\n\n";
}

my $lpdb;			# LPDB object, a local picture database
my $child;
my $ppid = $$;
if ($child = fork) {		# GUI starts after child is updating DB
    warn "$0: $$ forked $child to update $conf->{dbfile}\n";
    $SIG{USR1} = sub {
	warn "$$: signal USR1 received, DB updated!";
	$conf->{noupdate} = 1;	# ThumbViewer can now cache searches
    };
    $conf->{guisqltrace} and $conf->{sqltrace} = 1;
    $conf->{child} = $child;
    sleep($create ? 10 : 2);
    $lpdb = new LPDB($conf);
} else {			# child updates DB, creating if needed
    $conf->{updatesqltrace} and $conf->{sqltrace} = 1;
    if ($conf->{noupdate}) {
	warn "$0: $$ skipping DB update per {noupdate} config, exiting\n";
    } else {
	unlink $conf->{dbfile} if $create;
	$lpdb = new LPDB($conf);
	$lpdb->create;		# or update schema via *.sql
	$lpdb->update('.');
	$lpdb->cleanup;
	$lpdb->disconnect;
	warn "$0: $$ done updating $conf->{dbfile}\n";
	kill 'USR1', $ppid;	# tell GUI I'm done
    }
    exit;
}
END {
    kill 'TERM', $child if $child;
}

# huge for couch viewing, maybe not needed with designScale below?
# $::application->font->size(20);

my $lv;				# ListViewer
my $iv;				# ImageViewer
my $w;

# seems I need the application icon before window creation
$::application->icon(Prima::LPDB::ThumbViewer::icon);

$w = Prima::LPDB::Fullscreen->create(
    mainWindow => 1, # promote myself to MainWindow per Prima::Window:
    onDestroy  => sub { $::application->close },
    name => 'LPG',
    text => 'Local Picture Gallery',
    packPropagate => 0,
    size => [1600, 900],
    designScale => [16, 32],	# should it be in ThumbViewer?
    );
$::application->yield;
# $w->repaint;
# $w->update_view;

# designScale from faq.pod:
# perl -MPrima -MPrima::Application -le '$_=$::application->font; print $_->width, q( ), $_->height';
# I use xrdb -load file of this content for large text viewing from
# the couch:
# Prima.Font: Helvetica-20
# Prima.Color: white
# Prima.Back: black
# Prima.HiliteBackColor: gray33

# print sort map {"$_->{name}\n"} @{$::application-> fonts}; # see available fonts!!!

$lv = $w->insert(
    'Prima::LPDB::ThumbViewer',
    lpdb => $lpdb,		# LPDB connection required in advance
    name => 'TV',
    size => [320, 320],
    pack => { expand => 1, fill => 'both' },
    );

#$::application->yield;
$lv->repaint;
$lv->update_view;

run Prima;

exit 0;

__END__

=pod

=head1 NAME

lpgallery - remote-control (keyboard) driven local picture browser

=head1 SYNOPSIS

lpgallery [startup file]

What would happen if all your pictures(*) were available in just 1
local file and their metadata in a second file?  Any pictures could be
seen instantly and in any order.  This is that!

(*) thumbnails only, full resolution remains in the original separate
local files.

UNDER CONSTRUCTION - Picasa features don't yet exist!!!

=head1 DESCRIPTION

B<lpgallery> presents local pictures (optionally managed by Picasa) in
a keyboard (or better, a remote) controlled browser, like MythGallery
of MythTV.  The main window navigates a "virtual filesytem" thumbnail
tree of multiple organized paths to galleries of the images.  A second
window presents any one image at a time, optionally as an automatic
slide show.  Videos can be manually or automatically played as well.

Ideally this is run at full-screen on a big screen from the comfort of
your couch.  Currently this is read-only, it will never modify any
images.  The database is updated once from the filesystem in the
background at start up.

=head2 Remote Control / Keyboard Keys

B<Enter> selects a path or image while B<Escape> returns back.  Arrow
keys navigate the grid as expected, also available on the home row at
B<i/j/k/l>. Previous and Next gallery are immediately above left/right
at B<u/o> and B<p> starts a slideshow.  Finally, the digit keys scroll
long lists to that tenth of the list: 0 = first, 7 = 70% and so on.

B<m> opens the menu which lists other keys that can be used such as
B<q> for immediate quit or home row B<a/s> to zoom out/in or change
speed during a slide show.

B<Rewind/Seek> of media remotes control the zoom or speed like B<a/s>.
B<Prev/Next Track> find the next gallery like B<u/o>.  B<HomePage>
hits B<n> which toggles thumb crop or cycles information.

=head2 Thumbnail Grid

The main window is a grid of thumnail images.  Pictures below this
path in the tree are represented by a stack of three images: the
oldest, center (or random) and youngest.  Metadata about the selected
path is displayed above and below the grid.

Any videos are shown as a frame grab from the center of the video or
as a stack of 3 grabs at 5%, 50% and 95% of the time.  This can be
toggled with B<v>.  Either way the play time of the video is displayed
above the video image.

All images can optionally be cropped with the B<n> key to consume
their whole square in which case lines are overlayed that indicate
displayed and missing areas of the full image.  When cropped, portrait
and ultra wide images get an indicating flag in the corner.

The top level virtual paths of the grid are:

=over

=item [Folders]

Literal filesystem layout of picture files.  Any directory containing
images is hereafter called a "gallery".  By default images remain
grouped in these physical gallery collections in all virtual paths
that follow unless the Sort -> Gallery Groups menu option is changed
to Ungrouped.

=item [Timeline]

Pictures grouped chronologically into years or months or even all
time.  Be patient with large selections as they take a while to sort.

=item [Captions]

caption strings found in EXIF picture metadata

=item [Tags]

tag strings found in EXIF picture metadata

=item [Albums]

pictures organized by Albums (Picasa only not implemented)

=item [People]

pictures of recognized named faces (Picasa only not implemented)

=item [Stars]

pictures marked with stars as favorites (Picasa only not implemented)

=back

=head2 Image Viewer

A second window opens when hitting B<Enter> on an image from the grid.
This displays one picture at maximum size for the window.  Arrow keys
will now navigate both windows as will the B<u/i/o/j/k/l>.

The B<Enter> key will zoom to original size.  Scroll with the arrow
keys for images larger than the window and hit B<Enter> again to
toggle back to auto zoom best fit.  For video files B<Enter> instead
plays the video, hit B<Escape> to return when finished.

The B<n> key cycles through metadata "info" overlay levels.  This adds
common picture and camera metadata to the corners and (for Picasa
only) draws named rectangles around recognized faces.  Hit the B<d>
key to see all known metadata.

Finally, B<Escape> returns back to the thumbnail browser.

=head1 OPTIONS

In the Thumbnail Grid, the B<m> key brings up a Menu of options
including sorting, filtering, and navigating to other locations of
this picture in the tree.  In the Image Viewer, B<m> can start and
stop a slide show, adjust information overlay or show all metadata of
the image.  Refer to the menu to discover other keyboard shortcuts.

=head2 FILTERING

The grid menu provides options to select only pictures with certain
attributes or only those from a recent timeframe.  Filtering can cause
nodes in the tree to go blank where no pictures match.  Simply uncheck
the filters to restore access to all pictures.

=head2 SORTING

The sort menu is slightly complicated but provides great flexibility.
Sorts can be ascending or descending.  Sorting is done in the order of
the options presented:

=head3 Paths

First the virtual nodes in the paths of the tree can be sorted by
name, randomly or by the time of the first, middle or last picture
below this point in the tree.  The default is an alphabetical sort.

=head3 Gallery Groups

By default pictures remain grouped in their physical directory or
"gallery" which is displayed below the grid.  These galleries can be
sorted alphabetically or by the time of the first or last picture.
The I<Ungrouped> option is special: it breaks the gallery grouping and
lets all pictures sort together across all groups.

=head3 Images

Finally the images are sorted within their galleries, or as a whole if
Gallery Groups is set to I<Ungrouped>.  Sorting can be by filename,
size or time (default), or random.  The I<Fast> option is special in
that it does no sorting at all and returns the database order
immediately with no waiting.  This automatically assumes no gallery
grouping and reveals the order in which the images were added to the
database.

=head3 Mixed Folders

Within [Folders] you may have both images and directories in a
directory.  This simply chooses which to display first.

=head2 SLIDE SHOW

The B<p> key can Play or Pause a slide show while B<a/s> adjust its
playback speed.  The slideshow is the pictures from the Thumbnail grid
in order.  Therefore you can order the slideshow by the filtering and
sorting options of the grid.  The defaults may work well while a
random show would need I<Ungrouped> galleries and I<Random> images.

Arrow key navigation and info cycling is available while the slideshow
plays.  Menu or escape back to the grid automatically pauses the show,
then you can B<p> to continue playback from any point on the grid.

Videos are previewed with random frames from the video.  B<Enter> will
play the video (B<Escape> to return) or you can hit B<v> to toggle
video autoplay.

=head1 TODO

Add [Duplicates]/{alone,hard links,soft links}/

Add [Places]/place names/ via GPS lat/lon (see Geo::LatLon2Place)

Add all Picasa features (stars, albums, faces, [uploads])

Add configuration options and documentation

Maybe add simple image edit options to the menu

=head1 SEE ALSO

L<LPDB>, L<picasagallery>, L<Prima>

=head1 AUTHOR

Timothy D Witham <twitham@sbcglobal.net>

=head1 COPYRIGHT AND LICENSE

Copyright 2013-2024 Timothy D Witham.

This program is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.

=cut
